!function(n){var e={};function t(a){if(e[a])return e[a].exports;var s=e[a]={i:a,l:!1,exports:{}};return n[a].call(s.exports,s,s.exports,t),s.l=!0,s.exports}t.m=n,t.c=e,t.d=function(n,e,a){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:a})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var a=Object.create(null);if(t.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var s in n)t.d(a,s,function(e){return n[e]}.bind(null,s));return a},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="/webpack/",t(t.s=838)}({0:function(n,e){n.exports=function(n){function e(n){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",n)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(n):"undefined"!=typeof eval?eval.call(null,n):e("EvalError: No eval function available")}catch(n){e(n)}}},136:function(n,e,t){"use strict";t(0)(t(137))},137:function(n,e){n.exports="/** Globals PubSub */\n\nspweb.analytics = (function(globals, pubSub, cookie) {\n  /**\n   * Manages Google Analytics\n   * @module spweb/analytics\n   * @requires Global\n   * @requires pubSub\n   */\n\n  /*\n   Google Analytics custom variable slots (50 slots available):\n   1 Cached (page)\n   2 User Type (session)\n   3 Product (session)\n   4 ??\n   5 Market (page)\n   6 utm_source (session)\n   7 utm_medium (session)\n   8 utm_campaign (session)\n   */\n\n  'use strict';\n\n  var exports = {},\n    _enableGaEvents;\n\n  globals.dataLayer = globals.dataLayer || [];\n\n  _enableGaEvents = function() {\n    var gaCategories = document.querySelectorAll('[data-ga-category]');\n\n    function sendGaEvent(e) {\n      var category = e.target.getAttribute('data-ga-category') || '';\n      var action = e.target.getAttribute('data-ga-action') || '';\n      var label = e.target.getAttribute('data-ga-label') || '';\n\n      if (category && action) {\n        exports.sendEvent(\n          category,\n          action,\n          label\n        );\n      }\n    }\n\n    for (var i = 0; i < gaCategories.length; i++) {\n      gaCategories[i].addEventListener(\"click\", sendGaEvent);\n    }\n\n    pubSub.subscribe('login_username_success', function() {\n      globals.dataLayer.push({'event': 'login_username_success'});\n    });\n\n    pubSub.subscribe('login_facebook_success', function() {\n      globals.dataLayer.push({'event': 'login_facebook_success'});\n    });\n\n    if (cookie.get('sp_fblt')) {\n      pubSub.publish('login_facebook_success');\n      cookie.remove('sp_fblt');\n    }\n  };\n\n  exports.getTest = function(testId){\n    var rawCookie, unescapedCookie, decodedJson, value;\n    rawCookie = cookie.get('sp_ab');\n    if (!rawCookie) {\n      return \"\";\n    }\n    unescapedCookie = unescape(rawCookie);\n    try {\n      decodedJson = JSON.parse(unescapedCookie);\n    } catch (err) {\n      return \"\";\n    }\n    if (!decodedJson) {\n      return \"\";\n    }\n    value = decodedJson[testId];\n    if (!value) {\n      return \"\";\n    }\n    return value;\n  };\n\n  /**\n   * Module set up:\n   * Initialize global ga variable\n   * Bind handlers for tracking Google Event tagged elements;\n   */\n  exports.init = function(){\n    if (globals.hasOwnProperty('dataLayer')) {\n      _enableGaEvents();\n    }\n  };\n\n  /**\n   * @deprecated use the sendEvent method below for Universal Analytics support\n   * @param {String} category\n   * @param {String} action\n   * @param {String} [label]\n   */\n  exports.trackEvent = function(category, action, label) {\n    this.sendEvent(category, action, label);\n  };\n\n  /**\n   * Wrapper around spAnalytics.logEvent api; send event data to GA and internal backend\n   * @param {String} category\n   * @param {String} action\n   * @param {String} [label]\n   * @param {Object} [context] arbitrary event data to be tracked\n   */\n  exports.sendEvent = function(category, action, label, context) {\n    if (typeof category !== 'string' || typeof action !== 'string') {\n      return;\n    }\n\n    // double tracking to compare old ga event logging against new backend architecture (via spAnalytics)\n    // that should be logging the same things. @jasonsmith to remove\n    globals.dataLayer.push({\n      'event': 'GAEvent',\n      'eventCategory': category,\n      'eventAction': action,\n      'eventLabel': label,\n      'eventValue': context\n    });\n    globals.spAnalytics.logEvent(category, action, label, context);\n  };\n\n  /**\n   * Push offer impression information into the dataLayer\n   * @param typesString\n   * @param campaignsString\n   * @param placementsString\n   * @param displayOrdersString\n   */\n  exports.pushOfferImpressions = function(typesString, campaignsString,\n    placementsString, displayOrdersString) {\n\n    var types = typesString.split(\",\");\n    var campaigns = campaignsString.split(\",\");\n    var placements = placementsString.split(\",\");\n    var displayOrders = displayOrdersString.split(\",\");\n\n    var offer_impressions = types.map(function (type, index) {\n      return {\n        'name': type,\n        'variant': campaigns[index],\n        'list': placements[index],\n        'position': displayOrders[index]\n      };\n    });\n\n    globals.dataLayer.push({\n      'ecommerce': {\n        'currencyCode': '', // Local currency is optional.\n        'impressions': offer_impressions\n      }\n    });\n  };\n\n  /**\n   * Push an \"in view\" event to the data layer\n   * @param trackingObject\n   */\n  function pushOfferInView(trackingObject) {\n    globals.dataLayer.push({\n      'event': 'productView',\n      'ecommerce': {\n        'promoView': {\n          'promotions': [trackingObject]\n        }\n      }\n    });\n  }\n\n  /**\n   * Push a click event to the data layer\n   * @param trackingObject\n   */\n  function pushOfferClick(trackingObject) {\n    globals.dataLayer.push({\n      'event': 'productClick',\n      'ecommerce': {\n        'click': {\n          'products': [trackingObject]\n        }\n      }\n    });\n  }\n\n  var seenCTAs = new Set();\n\n  function isElementInViewport (el) {\n    var rect = el.getBoundingClientRect();\n    return rect.top >= 0 &&\n      rect.left >= 0 &&\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth);\n  }\n\n  function parseEventParameters(anchor) {\n    var eventParams = anchor.getAttribute('data-event-params');\n    if (!eventParams) return null;\n    try {\n      var trackingInfo = JSON.parse(eventParams);\n      return {\n        'country_code': trackingInfo[0],\n        'variant': trackingInfo[1],\n        'name': trackingInfo[3],\n        'list': trackingInfo[4],\n        'position': trackingInfo[5],\n        'href': anchor.getAttribute('href')\n      };\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * Set up the Enhanced e-commerce tracking for CampaignCallToActionClick\n   */\n  exports.setupPromotionsTracking = function(gaboEventEndpoint) {\n    var anchors = globals.document.links;\n    spweb.gaboEventTracker.init(gaboEventEndpoint);\n\n    function inViewCallback(anchor, trackingObject) {\n      return function () {\n        if (!seenCTAs.has(trackingObject) && isElementInViewport(anchor)) {\n          seenCTAs.add(trackingObject);\n          pushOfferInView(trackingObject);\n          spweb.gaboEventTracker.trackEvent(\n            'PromotionInViewport',\n            1,\n            [trackingObject.country_code,\n             trackingObject.variant,\n             trackingObject.list,\n             trackingObject.position,\n             trackingObject.name,\n             'prodCatId']\n          );\n        }\n      }\n    }\n\n    function clickCallback(trackingObject){\n      return function () {\n        pushOfferClick(trackingObject)\n      }\n    }\n\n    for (var i = 0; i < anchors.length; ++i){\n      var anchor = anchors[i];\n      if (anchor.getAttribute('data-event-name') === \"CampaignCallToActionClick\" &&\n          anchor.getAttribute('data-event-version') === \"2\"){\n\n        // If there's no 'data-event-params' or it's not in the format we expect it\n        // to be we skip to the next element\n        var trackingObject = parseEventParameters(anchor);\n        if (trackingObject === null) continue;\n\n        spweb.gaboEventTracker.trackEvent(\n          'CampaignLandingPageView',\n          2,\n          [trackingObject.country_code,\n           trackingObject.variant,\n           trackingObject.list,\n           trackingObject.position,\n           trackingObject.name,\n           'prodCatId']\n        );\n\n        (function(anchor, trackingObject) {\n          inViewCallback(anchor, trackingObject)();\n\n          window.addEventListener('resize', function() {\n            inViewCallback(anchor, trackingObject)();\n          });\n\n          window.addEventListener('scroll', function() {\n            inViewCallback(anchor, trackingObject)();\n          });\n        })(anchor, trackingObject);\n\n        if (anchor.addEventListener){\n          anchor.addEventListener(\"click\", clickCallback(trackingObject));\n        } else if (anchor.attachEvent){\n          anchor.attachEvent(\"onclick\", clickCallback(trackingObject));\n        }\n      }\n    }\n  };\n\n  /**\n   * Send an event to GTM\n   * Optional eventType tells GTM how to handle the event\n   *\n   * @param {obj} opts\n   * @param {string} eventType use to instruct GTM what kind of event this is (GAEvent by default)\n   * @param {Object} [context] arbitrary event data to be tracked\n   */\n  exports.sendGtmEvent = function(opts, eventType) {\n\n    if (typeof opts.category !== 'string' || typeof opts.action !== 'string') {\n      return;\n    }\n\n    globals.dataLayer.push({\n      'event' :  eventType || 'GAEvent',\n      'eventCategory' : opts.category,\n      'eventAction' : opts.action,\n      'eventLabel' : opts.label,\n      'eventValue' : opts.value,\n      'eventCallback': opts.callback,\n      'ecommerce' : opts.ecommerce\n    });\n  };\n\n  return exports;\n\n}(typeof global !== 'undefined' ? global : window, PubSub, spweb.cookie));\n"},160:function(n,e,t){t(0)(t(161))},161:function(n,e){n.exports="/**\n * Copyright (c) 2010,2011,2012,2013,2014 Morgan Roderick http://roderick.dk\n * License: MIT - http://mrgnrdrck.mit-license.org\n *\n * https://github.com/mroderick/PubSubJS\n */\n\n(function (root, factory){\n    'use strict';\n\n    var PubSub = {};\n    root.PubSub = PubSub;\n\n    var define = root.define;\n\n    factory(PubSub);\n\n    // AMD support\n    if (typeof define === 'function' && define.amd){\n        define(function() { return PubSub; });\n\n        // CommonJS and Node.js module support\n    } else if (typeof exports === 'object'){\n        if (module !== undefined && module.exports) {\n            exports = module.exports = PubSub; // Node.js specific `module.exports`\n        }\n        exports.PubSub = PubSub; // CommonJS module 1.1.1 spec\n        module.exports = exports = PubSub; // CommonJS\n    }\n\n}(( typeof window === 'object' && window ) || this, function (PubSub){\n    'use strict';\n\n    var messages = {},\n        lastUid = -1;\n\n    function hasKeys(obj){\n        var key;\n\n        for (key in obj){\n            if ( obj.hasOwnProperty(key) ){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Returns a function that throws the passed exception, for use as argument for setTimeout\n     * @alias throwException\n     * @function\n     * @param { Object } ex An Error object\n     */\n    function throwException( ex ){\n        return function reThrowException(){\n            throw ex;\n        };\n    }\n\n    function callSubscriberWithDelayedExceptions( subscriber, message, data ){\n        try {\n            subscriber( message, data );\n        } catch( ex ){\n            setTimeout( throwException( ex ), 0);\n        }\n    }\n\n    function callSubscriberWithImmediateExceptions( subscriber, message, data ){\n        subscriber( message, data );\n    }\n\n    function deliverMessage( originalMessage, matchedMessage, data, immediateExceptions ){\n        var subscribers = messages[matchedMessage],\n            callSubscriber = immediateExceptions ? callSubscriberWithImmediateExceptions : callSubscriberWithDelayedExceptions,\n            s;\n\n        if ( !messages.hasOwnProperty( matchedMessage ) ) {\n            return;\n        }\n\n        for (s in subscribers){\n            if ( subscribers.hasOwnProperty(s)){\n                callSubscriber( subscribers[s], originalMessage, data );\n            }\n        }\n    }\n\n    function createDeliveryFunction( message, data, immediateExceptions ){\n        return function deliverNamespaced(){\n            var topic = String( message ),\n                position = topic.lastIndexOf( '.' );\n\n            // deliver the message as it is now\n            deliverMessage(message, message, data, immediateExceptions);\n\n            // trim the hierarchy and deliver message to each level\n            while( position !== -1 ){\n                topic = topic.substr( 0, position );\n                position = topic.lastIndexOf('.');\n                deliverMessage( message, topic, data, immediateExceptions );\n            }\n        };\n    }\n\n    function messageHasSubscribers( message ){\n        var topic = String( message ),\n            found = Boolean(messages.hasOwnProperty( topic ) && hasKeys(messages[topic])),\n            position = topic.lastIndexOf( '.' );\n\n        while ( !found && position !== -1 ){\n            topic = topic.substr( 0, position );\n            position = topic.lastIndexOf( '.' );\n            found = Boolean(messages.hasOwnProperty( topic ) && hasKeys(messages[topic]));\n        }\n\n        return found;\n    }\n\n    function publish( message, data, sync, immediateExceptions ){\n        message = (typeof message === 'symbol') ? message.toString() : message;\n\n        var deliver = createDeliveryFunction( message, data, immediateExceptions ),\n            hasSubscribers = messageHasSubscribers( message );\n\n        if ( !hasSubscribers ){\n            return false;\n        }\n\n        if ( sync === true ){\n            deliver();\n        } else {\n            setTimeout( deliver, 0 );\n        }\n        return true;\n    }\n\n    /**\n     * Publishes the message, passing the data to it's subscribers\n     * @function\n     * @alias publish\n     * @param { String } message The message to publish\n     * @param {} data The data to pass to subscribers\n     * @return { Boolean }\n     */\n    PubSub.publish = function( message, data ){\n        return publish( message, data, false, PubSub.immediateExceptions );\n    };\n\n    /**\n     * Publishes the the message synchronously, passing the data to it's subscribers\n     * @function\n     * @alias publishSync\n     * @param { String } message The message to publish\n     * @param {} data The data to pass to subscribers\n     * @return { Boolean }\n     */\n    PubSub.publishSync = function( message, data ){\n        return publish( message, data, true, PubSub.immediateExceptions );\n    };\n\n    /**\n     * Subscribes the passed function to the passed message. Every returned token is unique and should be stored if you need to unsubscribe\n     * @function\n     * @alias subscribe\n     * @param { String } message The message to subscribe to\n     * @param { Function } func The function to call when a new message is published\n     * @return { String }\n     */\n    PubSub.subscribe = function( message, func ){\n        if ( typeof func !== 'function'){\n            return false;\n        }\n\n        message = (typeof message === 'symbol') ? message.toString() : message;\n\n        // message is not registered yet\n        if ( !messages.hasOwnProperty( message ) ){\n            messages[message] = {};\n        }\n\n        // forcing token as String, to allow for future expansions without breaking usage\n        // and allow for easy use as key names for the 'messages' object\n        var token = 'uid_' + String(++lastUid);\n        messages[message][token] = func;\n        \n        // return token for unsubscribing\n        return token;\n    };\n\n    /**\n     * Subscribes the passed function to the passed message once\n     * @function\n     * @alias subscribeOnce\n     * @param { String } message The message to subscribe to\n     * @param { Function } func The function to call when a new message is published\n     * @return { PubSub }\n     */\n    PubSub.subscribeOnce = function( message, func ){\n        var token = PubSub.subscribe( message, function(){\n            // before func apply, unsubscribe message\n            PubSub.unsubscribe( token );\n            func.apply( this, arguments );\n        });\n        return PubSub;\n    };\n\n    /**\n     * Clears all subscriptions\n     * @function\n     * @public\n     * @alias clearAllSubscriptions\n     */\n    PubSub.clearAllSubscriptions = function clearAllSubscriptions(){\n        messages = {};\n    };\n\n    /**\n     * Clear subscriptions by the topic\n     * @function\n     * @public\n     * @alias clearAllSubscriptions\n     */\n    PubSub.clearSubscriptions = function clearSubscriptions(topic){\n        var m;\n        for (m in messages){\n            if (messages.hasOwnProperty(m) && m.indexOf(topic) === 0){\n                delete messages[m];\n            }\n        }\n    };\n\n    /**\n     * Removes subscriptions\n     *\n     * - When passed a token, removes a specific subscription.\n     *\n\t * - When passed a function, removes all subscriptions for that function\n     *\n\t * - When passed a topic, removes all subscriptions for that topic (hierarchy)\n     * @function\n     * @public\n     * @alias subscribeOnce\n     * @param { String | Function } value A token, function or topic to unsubscribe from\n     * @example // Unsubscribing with a token\n     * var token = PubSub.subscribe('mytopic', myFunc);\n     * PubSub.unsubscribe(token);\n     * @example // Unsubscribing with a function\n     * PubSub.unsubscribe(myFunc);\n     * @example // Unsubscribing from a topic\n     * PubSub.unsubscribe('mytopic');\n     */\n    PubSub.unsubscribe = function(value){\n        var descendantTopicExists = function(topic) {\n                var m;\n                for ( m in messages ){\n                    if ( messages.hasOwnProperty(m) && m.indexOf(topic) === 0 ){\n                        // a descendant of the topic exists:\n                        return true;\n                    }\n                }\n\n                return false;\n            },\n            isTopic    = typeof value === 'string' && ( messages.hasOwnProperty(value) || descendantTopicExists(value) ),\n            isToken    = !isTopic && typeof value === 'string',\n            isFunction = typeof value === 'function',\n            result = false,\n            m, message, t;\n\n        if (isTopic){\n            PubSub.clearSubscriptions(value);\n            return;\n        }\n\n        for ( m in messages ){\n            if ( messages.hasOwnProperty( m ) ){\n                message = messages[m];\n\n                if ( isToken && message[value] ){\n                    delete message[value];\n                    result = value;\n                    // tokens are unique, so we can just stop here\n                    break;\n                }\n\n                if (isFunction) {\n                    for ( t in message ){\n                        if (message.hasOwnProperty(t) && message[t] === value){\n                            delete message[t];\n                            result = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n}));\n"},248:function(n,e,t){t(0)(t(249))},249:function(n,e){n.exports="/* eslint-disable */\n/**\n * Element.closest() polyfill\n * https://developer.mozilla.org/en-US/docs/Web/API/Element/closest#Polyfill\n */\nif (!Element.prototype.closest) {\n  if (!Element.prototype.matches) {\n    Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\n  }\n  Element.prototype.closest = function (s) {\n    var el = this;\n    var ancestor = this;\n    if (!document.documentElement.contains(el)) return null;\n    do {\n      if (ancestor.matches(s)) return ancestor;\n      ancestor = ancestor.parentElement;\n    } while (ancestor !== null);\n    return null;\n  };\n}\n/* eslint-enable */\n\nwindow.spweb = window.spweb || {};\n\nwindow.spweb.gaboEventTracker = (function gaboEventTrackerFactory(document) {\n  /**\n   * Listens to click events on any elements containing ALL:\n   *  - data-event-name\n   *  - data-event-version\n   *  - data-event-params\n   * And sends a request to log them through GaboEventService\n   *\n   */\n\n  'use strict';\n\n  const exports = {};\n\n  let _trackUrl;\n\n  const _prepareEventData = function _prepareEventData(name, version, params) {\n    let eventParams = params;\n    if (typeof params === 'string') {\n      try {\n        eventParams = JSON.parse(params);\n      } catch (e) {\n        eventParams = params;\n      }\n    }\n\n    return JSON.stringify({\n      eventName: name,\n      eventVersion: version,\n      eventParams: eventParams,\n    });\n  };\n\n  // Sends an async ajax request and disregard the response\n  const _trackEvent = function _trackEvent(name, version, params) {\n    const request = new XMLHttpRequest();\n    request.open('POST', _trackUrl, true);\n    request.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n    request.send(_prepareEventData(name, version, params));\n  };\n\n  const _trackDomEvent = function _trackDomEvent(target) {\n    _trackEvent(\n      ...['name', 'version', 'params'].map(attr => target.getAttribute(`data-event-${attr}`))\n    );\n  };\n\n  exports.init = function init(trackUrl) {\n    _trackUrl = trackUrl;\n\n    // Exclude clicks on modal dialog\n    document.addEventListener('click', function(e) {\n      const dataBearer = e.target.closest('[data-event-name]');\n      if (\n        dataBearer &&\n        dataBearer.getAttribute('data-event-version') &&\n        dataBearer.getAttribute('data-event-params') &&\n        !dataBearer.classList.contains('modal')\n      ) {\n        _trackDomEvent(dataBearer);\n      }\n    });\n\n    // Track modal dialog shown event\n    document.addEventListener('shown.bs.modal', function(e) {\n      if (\n        e.target &&\n        e.target.getAttribute('data-event-name') &&\n        e.target.getAttribute('data-event-version') &&\n        e.target.getAttribute('data-event-params')\n      ) {\n        _trackDomEvent(e.target);\n      }\n    });\n  };\n  exports.trackEvent = _trackEvent;\n\n  return exports;\n}(document));\n"},838:function(n,e,t){t(160),t(136),n.exports=t(248)}});
//# sourceMappingURL=marketing.01af9e89b0f313a95ae5.js.map